#!/bin/sh

. /usr/lib/live/config.sh

## live-config(7) - System Configuration Components
## Copyright (C) 2016-2020 The Debian Live team
## Copyright (C) 2006-2015 Daniel Baumann <mail@daniel-baumann.ch>
## Copyright (C) 2025 MiniOS <https://minios.dev>
##
## This program comes with ABSOLUTELY NO WARRANTY; for details see COPYING.
## This is free software, and you are welcome to redistribute it
## under certain conditions; see COPYING for details.

set -e

BEXT="sb"

Cmdline() {
    # Reading kernel command line
    for _PARAMETER in ${LIVE_CONFIG_CMDLINE}; do
        case "${_PARAMETER}" in
        from=*)
            FROM="${_PARAMETER#*from=}"
            ;;
        toram)
            TORAM="true"
            ;;
        live-config.username=* | username=*)
            LIVE_USERNAME="${_PARAMETER#*username=}"
            ;;
        live-config.link-user-dirs | link-user-dirs)
            LIVE_LINK_USER_DIRS="true"
            ;;
        live-config.bind-user-dirs | bind-user-dirs)
            LIVE_BIND_USER_DIRS="true"
            ;;
        live-config.user-dirs-path | user-dirs-path)
            LIVE_USER_DIRS_PATH="${_PARAMETER#*user-dirs-path=}"
            ;;
        live-config.debug | debug)
            LIVE_CONFIG_DEBUG=true
            ;;
        esac
    done
}

Init() {
    # Setting debug mode if enabled
    if [ "${LIVE_CONFIG_DEBUG}" = true ]; then
        set -x
    fi

    # Checking if package is installed or already configured
    if ! pkg_is_installed "user-setup" ||
        ! component_was_executed "user-setup"; then
        exit 0
    fi

    echo -n " user-ssh"
}

Config() {
    case "${LIVE_USERNAME}" in
    root)
        HOME_DIR="/root"
        ;;
    *)
        HOME_DIR="/home/$LIVE_USERNAME"
        ;;
    esac

    if [ -z "$FROM" ] || echo "$FROM" | grep 'http://' || [ -d "/run/initramfs/memory/iso" ]; then
        FROM="minios"
    elif [ -f /run/initramfs/var/log/from.log ]; then
        FROM=$(cat /run/initramfs/var/log/from.log)
    fi

    # search for bundles in the mounted directory
    if [ "$(find "/run/initramfs/memory/data/$FROM" -maxdepth 1 -name "*.$BEXT" 2>/dev/null)" != "" ]; then
        # we found at least one bundle/module here
        FROM=$(echo "/run/initramfs/memory/data/$FROM" | tr -s "/" | sed -r "s:/[^/]+/[.][.]/:/:g")
    elif [ "$(find "/run/initramfs/memory/iso/$FROM" -maxdepth 1 -name "*.$BEXT" 2>/dev/null)" != "" ]; then
        FROM=$(echo "/run/initramfs/memory/iso/$FROM" | tr -s "/" | sed -r "s:/[^/]+/[.][.]/:/:g")
    fi
    MEDIA="$FROM"

    echo "Checking if the media is writable or if TORAM mode is enabled"
    if ! test -w "$MEDIA" || [ "$TORAM" = "true" ]; then
        WRITABLE="false"
        echo "The media is not writable or the system is running in TORAM mode."
    else
        WRITABLE="true"
        echo "The media is writable."
    fi

    # Prepare SSH directory in target.
    if [ ! -d "$HOME_DIR/.ssh" ]; then
        echo "Preparing SSH directory"
        mkdir -p "$HOME_DIR/.ssh" || {
            echo "ERROR: Failed to create directory '$HOME_DIR/.ssh'"
            # Continue, SSH may be optional
        }
        chmod 700 "$HOME_DIR/.ssh" 2>/dev/null || true
        chown "$LIVE_USERNAME:$LIVE_USERNAME" "$HOME_DIR/.ssh" 2>/dev/null || true
    fi

    # Path to the marker file for storing last authkeys sync time
    STATE_FILE="/var/lib/live/config/last-authkeys-sync-time"

    # Get current time in seconds since epoch
    NOW=$(date +%s)

    # Flag indicating that system time is incorrect (has been reset)
    SKIP_TIME_CHECK=false

    # Check the marker of the previous synchronization
    if [ -f "$STATE_FILE" ]; then
        LAST_SYNC=$(cat "$STATE_FILE")
        if [ "$NOW" -lt "$LAST_SYNC" ]; then
            echo "ERROR: System time appears wrong. Skipping timestamp-based authkeys sync."
            SKIP_TIME_CHECK=true
        fi
    fi

    echo "Starting two-way sync of authorized_keys"

    # --- Function: determine whether to copy src ($1) to dst ($2)
    should_copy() {
        # $1 = source path, $2 = destination path
        if [ "$SKIP_TIME_CHECK" = true ]; then
            # if time is reset — only copy when destination does not exist
            [ ! -f "$2" ]
        else
            # otherwise — copy if dst missing or src is newer than dst
            [ ! -f "$2" ] || [ "$1" -nt "$2" ]
        fi
    }

    # --- Sync from media to home ---
    if [ -f "$MEDIA/authorized_keys" ] && should_copy "$MEDIA/authorized_keys" "$HOME_DIR/.ssh/authorized_keys"; then
        echo "Copying $MEDIA/authorized_keys -> $HOME_DIR/.ssh/authorized_keys"
        mkdir -p "$HOME_DIR/.ssh"
        cp -fp "$MEDIA/authorized_keys" "$HOME_DIR/.ssh/authorized_keys" || {
            echo "ERROR: copy failed"
            return 1
        }
        chmod 600 "$HOME_DIR/.ssh/authorized_keys" || {
            echo "ERROR: Failed to set permissions on $HOME_DIR/.ssh/authorized_keys"
            return 1
        }
        chown "$LIVE_USERNAME:$LIVE_USERNAME" "$HOME_DIR/.ssh/authorized_keys" || {
            echo "ERROR: Failed to set ownership on $HOME_DIR/.ssh/authorized_keys"
            return 1
        }
    # --- If writable, sync back from home to media ---
    elif [ "$WRITABLE" = "true" ] && [ -f "$HOME_DIR/.ssh/authorized_keys" ] && should_copy "$HOME_DIR/.ssh/authorized_keys" "$MEDIA/authorized_keys"; then
        echo "Copying $HOME_DIR/.ssh/authorized_keys -> $MEDIA/authorized_keys"
        cp -fp "$HOME_DIR/.ssh/authorized_keys" "$MEDIA/authorized_keys" || {
            echo "ERROR: copy failed"
            return 1
        }
    fi

    # Update the marker if the system time is valid
    if [ "$SKIP_TIME_CHECK" = "false" ]; then
        echo "$NOW" >"$STATE_FILE" || echo "WARNING: Could not write authkeys state file"
    fi

    echo "Sync completed"

    # Creating state file
    #touch /var/lib/live/config/user-ssh
}

Cmdline
Init
Config
